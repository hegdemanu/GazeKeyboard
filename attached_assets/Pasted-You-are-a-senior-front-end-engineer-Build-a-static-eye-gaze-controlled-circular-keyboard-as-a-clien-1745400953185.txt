You are a senior front-end engineer. Build a static eye-gaze controlled circular keyboard as a client-side HTML/CSS/JS Replit project. You already have the base logic implemented in JavaScript (provided below), and you must build on top of it with proper file structuring and UX polish.

✅ 1. Project Setup
Use Replit’s “HTML, CSS, JS” template (no servers, no build steps).

The keyboard must run purely in the browser—zero server dependencies.

📦 2. Dependencies
Add WebGazer.js in the <head> via CDN:

html
Copy
Edit
<script src="https://unpkg.com/webgazer"></script>
📁 3. File Structure
Use 3 separate files:

diff
Copy
Edit
index.html
styles.css
script.js
Ensure:

index.html links to styles.css and script.js

Code builds directly from the existing JavaScript snippet (see below)

🧱 4. index.html
Must include:

HTML boilerplate (<meta charset="UTF-8">, viewport tag)

A central <div id="keyboard"> for the keys

An <input id="output" readonly> below the keyboard

Instructions inside HTML comments on how to grant camera access

Also:

Center an 800x800 keyboard in the viewport

Add the SVG-based .progress-ring inside each .key as needed

Load webgazer.begin() and link to script.js at the end of <body>

🎨 5. styles.css
Include:

Dark mode background

.key as a 60×60 circular button, with hover and .selected animations

.progress-ring using stroke-dashoffset for circular dwell indication

.ring3.visible for fade-in transitions on suggestions

Stylized #output box below the keyboard (centered)

🧠 6. script.js
Start from the provided base logic (included below).

Add:

createRing() renders rings using polarToXY() for placement

webgazer.setGazeListener(data => { ... }) tracks gaze:

Uses elementFromPoint(x, y) to target keys

Adds a circular SVG dwell-ring on gaze enter

After 800ms of gaze, types the key, plays a beep, clears SVG

Updates outer suggestion ring from a dictionary prefix match

💡 Be sure to:

Use beep() via Web Audio API

Maintain .ring3 with .visible fade-in

Hide WebGazer’s default video and overlays

💅 7. UX Polish
Ensure transitions on .key, .ring3, and .progress-ring

Add smooth scale or color animations on key selection

Confirm:

WebGazer camera prompt shows on first load

Keyboard works with both mouse and simulated gaze (via pointer)

🚀 8. Deployment
Set Replit to serve index.html directly

On open, the browser should prompt for webcam access

Test on laptop and mobile browser with touch/pointer simulation

🧠 Base JavaScript Logic (start from this):
Paste the entire provided script (your script.js) here — ✅ you already wrote it and it works.

🎯 Goal
Deliver a visually polished, fully working circular eye-gaze keyboard with:

Real-time dwell feedback

Word prediction

Clean file separation

Smooth user experience from launch to gaze-typing

When the Replit is run, the keyboard should be immediately interactive via gaze or pointer.